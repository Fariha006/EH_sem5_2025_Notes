
# üìÑ **Technical Report: File Creation and Permission Configuration**

## üßæ Task Summary

This report documents the steps involved in creating a file using `touch`, modifying its permissions to `751` using `chmod`, and explaining the associated permission structure. The task aligns with best practices in Linux system administration and security.

---

## üõ†Ô∏è Methodology

1. **Environment Preparation**

   * Operating System: Ubuntu 22.04 (or any Linux distribution)
   * Terminal access with sudo privileges

2. **File Creation**

   * Used `touch` to create a file named `secure_file`.

3. **Permission Modification**

   * Used `chmod 751 secure_file` to assign specific permissions.

4. **Permission Verification**

   * Used `ls -l` to verify the permissions.

5. **Analysis and Documentation**

   * Interpreted octal permissions and analyzed the security implications.

---

## üì∏ Screenshots (Command Output)

```bash
$ touch secure_file

$ chmod 751 secure_file

$ ls -l secure_file
-rwxr-x--x 1 user user 0 Jul 30 14:22 secure_file
```

---

## üîç Findings

### üìÇ File Permissions - Octal Notation Explained

* **Octal `751` Breakdown**:

  ```
  Owner: 7 (rwx) -> Read, Write, Execute
  Group: 5 (r-x) -> Read, Execute
  Others: 1 (--x) -> Execute only
  ```

| Octal | Binary | Symbolic | Meaning               |
| ----- | ------ | -------- | --------------------- |
| 7     | 111    | rwx      | Full access           |
| 5     | 101    | r-x      | Read and execute only |
| 1     | 001    | --x      | Execute only          |

* **Symbolic Representation**: `-rwxr-x--x`

  * The first character (`-`) indicates a regular file.
  * `rwx`: Owner has full access.
  * `r-x`: Group can read and execute but not modify.
  * `--x`: Others can only execute the file.

---

## üîê Security Analysis

* **Security Implications of `751`**:

  * **Owner** has full control‚Äîstandard for files created by a user.
  * **Group** can read and execute, useful for collaborative environments.
  * **Others** can only execute‚Äîthis prevents unauthorized reading or editing.
  * Prevents **information leakage** by blocking read access for anonymous users.

* **Why `751` is Useful**:

  * Useful for **scripts or binaries** where execution is allowed but reading the content is restricted.
  * Ideal for **command wrappers or CLI tools** in shared environments.

---

## ‚úÖ Conclusions

* Learned how Linux file permissions are configured via octal notation.
* Understood the importance of permission granularity in multi-user systems.
* Practiced using core system administration tools like `chmod`, `ls`, and `touch`.

---

## üìú Code & Commands

```bash
# Step 1: Create the file
touch secure_file

# Step 2: Change permissions to 751
chmod 751 secure_file

# Step 3: Verify the permission change
ls -l secure_file
```

Optional Bash script to automate the task:

```bash
#!/bin/bash
# file_permission.sh

FILENAME="secure_file"

# Create the file
touch $FILENAME

# Change permissions to 751
chmod 751 $FILENAME

# Display permissions
ls -l $FILENAME
```

Usage:

```bash
chmod +x file_permission.sh
./file_permission.sh
```

---

## üß™ Tools Used

| Tool        | Purpose                               |
| ----------- | ------------------------------------- |
| `touch`     | File creation                         |
| `chmod`     | Permission setting via octal notation |
| `ls -l`     | Verifying file permissions            |
| Bash        | Scripting and automation              |
| Linux Shell | Core system administration            |

---

## üìù Additional Notes

Though not directly used in this task, tools like `Nmap`, `Shodan`, and `VirusTotal` are often used alongside file permission configurations in real-world scenarios to:

* Detect open services with insecure file permissions.
* Confirm if malware has been injected into executable files.
* Assess web server misconfigurations (e.g., publicly readable scripts).

---

## üìä Assessment Breakdown

| Criteria                 | Points | Description                                                 |
| ------------------------ | ------ | ----------------------------------------------------------- |
| Technical Implementation | 40%    | Accurate usage of `chmod`, correct octal permission setting |
| Report Quality           | 30%    | Detailed, structured, well-documented explanation           |
| Security Analysis        | 20%    | Discussed security implications of file permissions         |
| Documentation            | 10%    | Included code, comments, and commands                       |


